host = host,
user = user,
password = password)
# The OHDSI DatabaseConnector connection details
targetDialect <-"postgresql"
cdm_database_schema<-"public"
# This is the name of the schema that contains the OMOP CDM with patient-level data
vocabulary_database_schema<-"vocabulary"
results_database_schema<-"results"
cohortTableExposures<-"CovVaxExposures_XL"
cohortTableOutcomes <-"CovVaxOutcomes_XL_aesibmj"
cohortTableProfiles<-"CovVaxProfiles_XL_aesibmj"
db.name<-"CPRD AURUM_vaccinated"
db.name
create.outcome.cohorts<-TRUE #FALSE    #  TRUE
run.vax.cohorts<- TRUE #TRUE  #FALSE
run.covid.cohorts<- FALSE #FALSE  #FALSE
run.general.pop.cohorts<-FALSE
# run the analysis
start<-Sys.time()
source(here("RunAnalysis.R"))
Sys.time()-start
conn <-  connect(connectionDetails)
sql <-  " select distinct  cohort_definition_id from results.CovVaxOutcomes_XL_aesibmj;"
querySql(conn,sql)
renv::restore()
# packages
library(SqlRender)
library(DatabaseConnector)
library(FeatureExtraction)
library(here)
library(lubridate)
library(stringr)
library(ggplot2)
library(DBI)
library(dbplyr)
library(dplyr)
library(tidyr)
library(kableExtra)
library(RSQLite)
library(rmarkdown)
library(tableone)
library(scales)
library(forcats)
library(epiR)
library(RPostgreSQL)
# please load the above packages
# you should have them all available, with the required version, after
# having run renv::restore above
output.folder<-here::here("output")
# the path to a folder (that exists) where the results from this analysis will be saved
oracleTempSchema<-NULL
server<-Sys.getenv("DB_SERVER_cdmgold202007")
server_dbi<-Sys.getenv("DB_SERVER_cdmgold202007_dbi")
user<-Sys.getenv("DB_USER")
password<- Sys.getenv("DB_PASSWORD")
port<-Sys.getenv("DB_PORT")
host<-Sys.getenv("DB_HOST")
connectionDetails <-DatabaseConnector::downloadJdbcDrivers("postgresql", here::here())
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server =server,
user = user,
password = password,
port = port ,
pathToDriver = here::here())
db <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = server_dbi,
port = port,
host = host,
user = user,
password = password)
# The OHDSI DatabaseConnector connection details
targetDialect <-"postgresql"
# This is your sql dialect used with the OHDSI SqlRender package
cdm_database_schema<-"public"
# This is the name of the schema that contains the OMOP CDM with patient-level data
vocabulary_database_schema<-"vocabulary"
# This is the name of the schema that contains the vocabularies
results_database_schema<-"results"
# This is the name of the schema where a results table will be created
cohortTableExposures<-"CovVaxExposures_XL"
cohortTableOutcomes <-"CovVaxOutcomes_XL_aesibmj"
cohortTableProfiles<-"CovVaxProfiles_XL_aesibmj"
db.name<-"CPRD GOLD_general"
conn <-  connect(connectionDetails)
sql <-  " select distinct  cohort_definition_id from results.CovVaxOutcomes_XL_aesibmj;"
querySql(conn,sql)
db.name<-"CPRD GOLD_general"
create.outcome.cohorts<-TRUE #FALSE    #  TRUE
run.vax.cohorts<- FALSE #TRUE  #FALSE
run.covid.cohorts<- FALSE #FALSE  #FALSE
run.general.pop.cohorts<-TRUE
# run the analysis
start<-Sys.time()
source(here("RunAnalysis.R"))
Sys.time()-start
conn <-  connect(connectionDetails)
sql <-  " select distinct  cohort_definition_id from results.CovVaxOutcomes_XL_aesibmj;"
querySql(conn,sql)
View(outcome.cohorts)
# instantiate outcome tables -----
cohort.sql<-list.files(here("OutcomeCohorts", "sql"))
cohort.sql<-cohort.sql[cohort.sql!="CreateCohortTable.sql"]
outcome.cohorts<-tibble(id=1:length(cohort.sql),
file=cohort.sql,
name=str_replace(cohort.sql, ".sql", ""))
View(outcome.cohorts)
conn <- connect(connectionDetails)
# create empty cohorts table
print(paste0("Create empty cohort table"))
sql<-readSql(here("OutcomeCohorts", "sql","CreateCohortTable.sql"))
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cohort_database_schema =  results_database_schema,
cohort_table = cohortTableOutcomes)
rm(sql)
for(cohort.i in 1:length(outcome.cohorts$id)){
working.id<-outcome.cohorts$id[cohort.i]
print(paste0("- Getting outcome: ",
outcome.cohorts$name[cohort.i],
" (", cohort.i, " of ", length(outcome.cohorts$name), ")"))
sql<-readSql(here("OutcomeCohorts", "sql",
outcome.cohorts$file[cohort.i]))
sql <- sub("BEGIN: Inclusion Impact Analysis - event.*END: Inclusion Impact Analysis - person", "", sql)
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cdm_database_schema = cdm_database_schema,
vocabulary_database_schema = vocabulary_database_schema,
target_database_schema = results_database_schema,
results_database_schema = results_database_schema,
target_cohort_table = cohortTableOutcomes,
target_cohort_id = working.id)
}
disconnect(conn)
}
outcome_db<-tbl(db, sql(paste0("SELECT * FROM ",
results_database_schema,
".", cohortTableOutcomes)))
# drop any outcome cohorts with less than 5 people
outcome.cohorts<-outcome.cohorts %>%
inner_join(outcome_db %>%
group_by(cohort_definition_id) %>%
tally() %>%
collect() %>%
filter(n>5) %>%
select(cohort_definition_id),
by=c("id"="cohort_definition_id"))
# packages
library(SqlRender)
library(DatabaseConnector)
library(FeatureExtraction)
library(here)
library(lubridate)
library(stringr)
library(ggplot2)
library(DBI)
library(dbplyr)
library(dplyr)
library(tidyr)
library(kableExtra)
library(RSQLite)
library(rmarkdown)
library(tableone)
library(scales)
library(forcats)
library(epiR)
library(RPostgreSQL)
# please load the above packages
# you should have them all available, with the required version, after
# having run renv::restore above
output.folder<-here::here("output")
# the path to a folder (that exists) where the results from this analysis will be saved
oracleTempSchema<-NULL
# If you havenÂ´t already, save database details to .Renviron by running:
# usethis::edit_r_environ()
server<-Sys.getenv("DB_SERVER_cdmgold202007")
server_dbi<-Sys.getenv("DB_SERVER_cdmgold202007_dbi")
user<-Sys.getenv("DB_USER")
password<- Sys.getenv("DB_PASSWORD")
port<-Sys.getenv("DB_PORT")
host<-Sys.getenv("DB_HOST")
connectionDetails <-DatabaseConnector::downloadJdbcDrivers("postgresql", here::here())
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server =server,
user = user,
password = password,
port = port ,
pathToDriver = here::here())
db <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = server_dbi,
port = port,
host = host,
user = user,
password = password)
# The OHDSI DatabaseConnector connection details
targetDialect <-"postgresql"
# This is your sql dialect used with the OHDSI SqlRender package
cdm_database_schema<-"public"
# This is the name of the schema that contains the OMOP CDM with patient-level data
vocabulary_database_schema<-"vocabulary"
# This is the name of the schema that contains the vocabularies
results_database_schema<-"results"
# This is the name of the schema where a results table will be created
cohortTableExposures<-"CovVaxExposures_XL"
cohortTableOutcomes <-"CovVaxOutcomes_XL_aesibmj"
cohortTableProfiles<-"CovVaxProfiles_XL_aesibmj"
# These are the tables to be created in your results schema for this analysis
# You can keep the above names or change them
# Note, any existing tables in your results schema with the same name will be overwritten
db.name<-"CPRD GOLD_general"
create.outcome.cohorts<-TRUE #FALSE    #  TRUE
# if you have already created the outcome cohorts, you can set this to FALSE to skip instantiating these cohorts again
run.vax.cohorts<- FALSE #TRUE  #FALSE
run.covid.cohorts<- FALSE #FALSE  #FALSE
run.general.pop.cohorts<-TRUE
cohort.sql<-list.files(here("OutcomeCohorts", "sql"))
cohort.sql<-cohort.sql[cohort.sql!="CreateCohortTable.sql"]
outcome.cohorts<-tibble(id=1:length(cohort.sql),
file=cohort.sql,
name=str_replace(cohort.sql, ".sql", ""))
if(create.outcome.cohorts=="FALSE"){
print(paste0("- Skipping creating outcome cohorts"))
} else {
print(paste0("- Getting outcomes"))
conn <- connect(connectionDetails)
# create empty cohorts table
print(paste0("Create empty cohort table"))
sql<-readSql(here("OutcomeCohorts", "sql","CreateCohortTable.sql"))
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cohort_database_schema =  results_database_schema,
cohort_table = cohortTableOutcomes)
rm(sql)
for(cohort.i in 1:length(outcome.cohorts$id)){
working.id<-outcome.cohorts$id[cohort.i]
print(paste0("- Getting outcome: ",
outcome.cohorts$name[cohort.i],
" (", cohort.i, " of ", length(outcome.cohorts$name), ")"))
sql<-readSql(here("OutcomeCohorts", "sql",
outcome.cohorts$file[cohort.i]))
sql <- sub("BEGIN: Inclusion Impact Analysis - event.*END: Inclusion Impact Analysis - person", "", sql)
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cdm_database_schema = cdm_database_schema,
vocabulary_database_schema = vocabulary_database_schema,
target_database_schema = results_database_schema,
results_database_schema = results_database_schema,
target_cohort_table = cohortTableOutcomes,
target_cohort_id = working.id)
}
disconnect(conn)
}
# instantiate outcome tables -----
cohort.sql<-list.files(here("OutcomeCohorts", "sql"))
cohort.sql<-cohort.sql[cohort.sql!="CreateCohortTable.sql"]
outcome.cohorts<-tibble(id=1:length(cohort.sql),
file=cohort.sql,
name=str_replace(cohort.sql, ".sql", ""))
if(create.outcome.cohorts=="FALSE"){
print(paste0("- Skipping creating outcome cohorts"))
} else {
print(paste0("- Getting outcomes"))
conn <- connect(connectionDetails)
# create empty cohorts table
print(paste0("Create empty cohort table"))
sql<-readSql(here("OutcomeCohorts", "sql","CreateCohortTable.sql"))
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cohort_database_schema =  results_database_schema,
cohort_table = cohortTableOutcomes)
rm(sql)
for(cohort.i in 1:length(outcome.cohorts$id)){
working.id<-outcome.cohorts$id[cohort.i]
print(paste0("- Getting outcome: ",
outcome.cohorts$name[cohort.i],
" (", cohort.i, " of ", length(outcome.cohorts$name), ")"))
sql<-readSql(here("OutcomeCohorts", "sql",
outcome.cohorts$file[cohort.i]))
sql <- sub("BEGIN: Inclusion Impact Analysis - event.*END: Inclusion Impact Analysis - person", "", sql)
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cdm_database_schema = cdm_database_schema,
vocabulary_database_schema = vocabulary_database_schema,
target_database_schema = results_database_schema,
results_database_schema = results_database_schema,
target_cohort_table = cohortTableOutcomes,
target_cohort_id = working.id)
}
disconnect(conn)
}
# packages
library(SqlRender)
library(DatabaseConnector)
library(FeatureExtraction)
library(here)
library(lubridate)
library(stringr)
library(ggplot2)
library(DBI)
library(dbplyr)
library(dplyr)
library(tidyr)
library(kableExtra)
library(RSQLite)
library(rmarkdown)
library(tableone)
library(scales)
library(forcats)
library(epiR)
library(RPostgreSQL)
# instantiate outcome tables -----
cohort.sql<-list.files(here("OutcomeCohorts", "sql"))
cohort.sql<-cohort.sql[cohort.sql!="CreateCohortTable.sql"]
outcome.cohorts<-tibble(id=1:length(cohort.sql),
file=cohort.sql,
name=str_replace(cohort.sql, ".sql", ""))
if(create.outcome.cohorts=="FALSE"){
print(paste0("- Skipping creating outcome cohorts"))
} else {
print(paste0("- Getting outcomes"))
conn <- connect(connectionDetails)
# create empty cohorts table
print(paste0("Create empty cohort table"))
sql<-readSql(here("OutcomeCohorts", "sql","CreateCohortTable.sql"))
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cohort_database_schema =  results_database_schema,
cohort_table = cohortTableOutcomes)
rm(sql)
for(cohort.i in 1:length(outcome.cohorts$id)){
working.id<-outcome.cohorts$id[cohort.i]
print(paste0("- Getting outcome: ",
outcome.cohorts$name[cohort.i],
" (", cohort.i, " of ", length(outcome.cohorts$name), ")"))
sql<-readSql(here("OutcomeCohorts", "sql",
outcome.cohorts$file[cohort.i]))
sql <- sub("BEGIN: Inclusion Impact Analysis - event.*END: Inclusion Impact Analysis - person", "", sql)
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cdm_database_schema = cdm_database_schema,
vocabulary_database_schema = vocabulary_database_schema,
target_database_schema = results_database_schema,
results_database_schema = results_database_schema,
target_cohort_table = cohortTableOutcomes,
target_cohort_id = working.id)
}
disconnect(conn)
}
conn <-  connect(connectionDetails)
sql <-  " select distinct  cohort_definition_id from results.CovVaxOutcomes_XL_aesibmj;"
querySql(conn,sql)
# instantiate outcome tables -----
cohort.sql<-list.files(here("OutcomeCohorts", "sql"))
cohort.sql<-cohort.sql[cohort.sql!="CreateCohortTable.sql"]
outcome.cohorts<-tibble(id=1:length(cohort.sql),
file=cohort.sql,
name=str_replace(cohort.sql, ".sql", ""))
conn <- connect(connectionDetails)
# create empty cohorts table
print(paste0("Create empty cohort table"))
sql<-readSql(here("OutcomeCohorts", "sql","CreateCohortTable.sql"))
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cohort_database_schema =  results_database_schema,
cohort_table = cohortTableOutcomes)
rm(sql)
for(cohort.i in 1:length(outcome.cohorts$id)){
working.id<-outcome.cohorts$id[cohort.i]
print(paste0("- Getting outcome: ",
outcome.cohorts$name[cohort.i],
" (", cohort.i, " of ", length(outcome.cohorts$name), ")"))
sql<-readSql(here("OutcomeCohorts", "sql",
outcome.cohorts$file[cohort.i]))
sql <- sub("BEGIN: Inclusion Impact Analysis - event.*END: Inclusion Impact Analysis - person", "", sql)
sql<-SqlRender::translate(sql, targetDialect = targetDialect)
renderTranslateExecuteSql(conn=conn,
sql,
cdm_database_schema = cdm_database_schema,
vocabulary_database_schema = vocabulary_database_schema,
target_database_schema = results_database_schema,
results_database_schema = results_database_schema,
target_cohort_table = cohortTableOutcomes,
target_cohort_id = working.id)
}
disconnect(conn)
}
db.name<-"CPRD GOLD_general"
db.name
create.outcome.cohorts<-TRUE #FALSE    #  TRUE
run.vax.cohorts<- FALSE #TRUE  #FALSE
run.covid.cohorts<- FALSE #FALSE  #FALSE
run.general.pop.cohorts<-TRUE
# run the analysis
start<-Sys.time()
source(here("RunAnalysis.R"))
Sys.time()-start
# run the analysis
start<-Sys.time()
source(here("RunAnalysis.R"))
Sys.time()-start
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server =server,
user = user,
password = password,
port = port ,
pathToDriver = here::here())
db <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = server_dbi,
port = port,
host = host,
user = user,
password = password)
# The OHDSI DatabaseConnector connection details
targetDialect <-"postgresql"
cdm_database_schema<-"public"
# This is the name of the schema that contains the OMOP CDM with patient-level data
vocabulary_database_schema<-"vocabulary"
results_database_schema<-"results"
cohortTableExposures<-"CovVaxExposures_XL"
cohortTableOutcomes <-"CovVaxOutcomes_XL_aesibmj"
cohortTableProfiles<-"CovVaxProfiles_XL_aesibmj"
db.name<-"CPRD GOLD_general"
db.name
create.outcome.cohorts<-TRUE #FALSE    #  TRUE
run.vax.cohorts<- FALSE #TRUE  #FALSE
run.covid.cohorts<- FALSE #FALSE  #FALSE
run.general.pop.cohorts<-TRUE
# run the analysis
start<-Sys.time()
source(here("RunAnalysis.R"))
Sys.time()-start
conn <-  connect(connectionDetails)
sql <-  " select distinct  cohort_definition_id from results.CovVaxOutcomes_XL_aesibmj;"
querySql(conn,sql)
load("~/CovidVaccinationSafetyStudy_aesibmj/output/IR.summary_CPRD AURUM_covid.RData")
load("~/CovidVaccinationSafetyStudy_aesibmj/output/IR.summary_CPRD AURUM_covid.RData")
View(IR.summary)
# packages
library(SqlRender)
library(DatabaseConnector)
library(FeatureExtraction)
library(here)
library(lubridate)
library(stringr)
library(ggplot2)
library(DBI)
library(dbplyr)
library(dplyr)
library(tidyr)
library(kableExtra)
library(RSQLite)
library(rmarkdown)
library(tableone)
library(scales)
library(forcats)
library(epiR)
library(RPostgreSQL)
# please load the above packages
# you should have them all available, with the required version, after
# having run renv::restore above
output.folder<-here::here("output")
# the path to a folder (that exists) where the results from this analysis will be saved
oracleTempSchema<-NULL
View(IR.summary)
server<-Sys.getenv("DB_SERVER_p20_059_cdm_aurum")
server_dbi<-Sys.getenv("DB_SERVER_p20_059_cdm_aurum_dbi")
user<-Sys.getenv("DB_USER")
password<- Sys.getenv("DB_PASSWORD")
port<-Sys.getenv("DB_PORT")
host<-Sys.getenv("DB_HOST")
connectionDetails <-DatabaseConnector::downloadJdbcDrivers("postgresql", here::here())
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
server =server,
user = user,
password = password,
port = port ,
pathToDriver = here::here())
db <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = server_dbi,
port = port,
host = host,
user = user,
password = password)
# The OHDSI DatabaseConnector connection details
targetDialect <-"postgresql"
cdm_database_schema<-"public"
# This is the name of the schema that contains the OMOP CDM with patient-level data
vocabulary_database_schema<-"vocabulary"
results_database_schema<-"results"
cohortTableExposures<-"CovVaxExposures_XL"
cohortTableOutcomes <-"CovVaxOutcomes_XL_aesibmj"
cohortTableProfiles<-"CovVaxProfiles_XL_aesibmj"
db.name<-"CPRD GOLD_general"
db.name<-"CPRD AURUM_covid"
db.name
create.outcome.cohorts<-TRUE #FALSE    #  TRUE
run.vax.cohorts<- FALSE #TRUE  #FALSE
run.covid.cohorts<- TRUE #FALSE  #FALSE
run.general.pop.cohorts<-FALSE
source(here("RunAnalysis.R"))
Sys.time()-start
View(IR.summary)
load("~/CovidVaccinationSafetyStudy_aesibmj/output/IR.summary_CPRD AURUM_covid.RData")
